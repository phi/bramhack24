import { Component, Input, ViewChild } from "@angular/core";
import { BaseAngular } from "./base-angular";
import { AngularComponentFactory } from "./component-factory";
import * as i0 from "@angular/core";
import * as i1 from "./svgbundle.component";
import * as i2 from "./components/survey-header/survey-header.component";
import * as i3 from "./page.component";
import * as i4 from "./components/brand-info/brand-info.component";
import * as i5 from "./components/notifier/notifier.component";
import * as i6 from "@angular/common";
import * as i7 from "@angular/forms";
import * as i8 from "./utils/dynamic.directive";
import * as i9 from "./utils/safe-html.pipe";
export class SurveyContentComponent extends BaseAngular {
    constructor() {
        super(...arguments);
        this.isSurveyUpdated = false;
    }
    getModel() {
        return this.model;
    }
    onModelChanged() {
        if (!!this.previousModel) {
            this.previousModel.destroyResizeObserver();
            this.previousModel.renderCallback = undefined;
        }
        if (!!this.model) {
            this.model.renderCallback = () => {
                this.detectChanges();
            };
        }
        this.isSurveyUpdated = true;
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        if (!!this.model) {
            this.model.rootElement = undefined;
            this.model.destroyResizeObserver();
            this.model.renderCallback = undefined;
        }
    }
    ngAfterViewInit() {
        this.isSurveyUpdated = true;
    }
    ngAfterViewChecked() {
        if (!!this.model && this.isSurveyUpdated) {
            this.model.afterRenderSurvey(this.rootEl.nativeElement);
            this.model.startTimerFromUI();
        }
        super.ngAfterViewChecked();
    }
}
SurveyContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: SurveyContentComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
SurveyContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: SurveyContentComponent, selector: "survey-content", inputs: { model: "model" }, viewQueries: [{ propertyName: "rootEl", first: true, predicate: ["surveyContainer"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-template #template>\n  <div #surveyContainer *ngIf=\"!!model\" [class]=\"model.getRootCss()\" [style]=\"model.themeVariables\" [lang]=\"model.locale || 'en'\" [dir]=\"model.localeDir\">\n    <sv-svg-bundle *ngIf=\"model.needRenderIcons\"></sv-svg-bundle>\n    <div [class]=\"model.wrapperFormCss\">\n      <div *ngIf=\"!!model.renderBackgroundImage\" [class]=\"model.css.rootBackgroundImage\" [style]=\"model.backgroundImageStyle\"></div>\n      <form onsubmit=\"return false;\">\n        <div class=\"sv_custom_header\" [hidden]=\"model.hasLogo\"></div>\n        <div [class]=\"model.css.container\">\n          <div *ngIf=\"model.headerView === 'basic' && model.renderedHasHeader\" [class]=\"model.css.header\" [survey]=\"model\" sv-ng-survey-header></div>\n          <ng-template [component]=\"{ name: 'sv-components-container', data: { survey: model, container: 'header', needRenderWrapper: false } }\"></ng-template>\n          <div *ngIf=\"model.isShowingPage\" [class]=\"model.bodyContainerCss\">\n            <ng-template [component]=\"{ name: 'sv-components-container', data: { survey: model, container: 'left' } }\"></ng-template>\n            <div class=\"sv-components-column sv-components-column--expandable\">\n              <ng-template [component]=\"{ name: 'sv-components-container', data: { survey: model, container: 'center' } }\"></ng-template>\n              <div [class]=\"model.bodyCss\" [style.maxWidth]=\"model.renderedWidth\" [id]=\"model.activePage ? model.activePage.id : ''\">\n                <ng-template [component]=\"{ name: 'sv-components-container', data: { survey: model, container: 'contentTop' } }\"></ng-template>\n                <!-- ko if: activePage -->\n                  <ng-container *ngIf=\"model.activePage\">\n                      <sv-ng-page [model]=\"model.activePage\" [survey]=\"model\"></sv-ng-page>\n                  </ng-container>\n                  <!-- ko if: activePage.rows.length == 0 && $data.emptyPageTemplate -->\n                  <!-- ko template: { name: emptyPageTemplate, data: $data.emptyPageTemplateData || $data } -->\n                  <!-- /ko -->\n                  <!-- /ko -->\n                <!-- /ko -->\n                <ng-template [component]=\"{ name: 'sv-components-container', data: { survey: model, container: 'contentBottom' } }\"></ng-template>\n                <sv-brand-info *ngIf=\"model.showBrandInfo\"></sv-brand-info>\n              </div>\n            </div>\n            <ng-template [component]=\"{ name: 'sv-components-container', data: { survey: model, container: 'right' } }\"></ng-template>\n          </div>\n          <ng-template [component]=\"{ name: 'sv-components-container', data: { survey: model, container: 'footer', needRenderWrapper: false } }\"></ng-template>\n          <div *ngIf=\"model.state === 'completed' && model.showCompletedPage\" [class]=\"model.completedCss\"\n            [innerHtml]=\"model.processedCompletedHtml | safeHtml\"></div>\n          <ng-template *ngIf=\"model.state === 'completed' && model.showCompletedPage\" [component]=\"{ name: 'sv-components-container', data: { survey: model, container: 'completePage' } }\"></ng-template>\n          <div *ngIf=\"model.state === 'completedbefore'\" [class]=\"model.completedBeforeCss\"\n            [innerHtml]=\"model.processedCompletedBeforeHtml | safeHtml\"></div>\n          <div *ngIf=\"model.state === 'loading'\" [class]=\"model.loadingBodyCss\" [innerHtml]=\"model.processedLoadingHtml\"></div>\n          <div *ngIf=\"model.state === 'empty'\" [class]=\"model.css.bodyEmpty\">{{model.emptySurveyText}}</div>\n        </div>\n      </form>\n      <sv-notifier [notifier]=\"model.notifier\"></sv-notifier>\n    </div>\n  </div>\n</ng-template>", components: [{ type: i1.SvgBundleComponent, selector: "sv-svg-bundle" }, { type: i2.SurveyHeaderComponent, selector: "'[sv-ng-survey-header]'", inputs: ["survey"] }, { type: i3.PageComponent, selector: "page, sv-ng-page", inputs: ["model", "survey"] }, { type: i4.BrandInfoComponent, selector: "sv-brand-info" }, { type: i5.NotifierComponent, selector: "sv-notifier", inputs: ["notifier"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i7.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i7.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }], pipes: { "safeHtml": i9.SafeHtmlPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: SurveyContentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "survey-content",
                    templateUrl: "./survey-content.component.html"
                }]
        }], propDecorators: { model: [{
                type: Input
            }], rootEl: [{
                type: ViewChild,
                args: ["surveyContainer", { static: false }]
            }] } });
AngularComponentFactory.Instance.registerComponent("survey", SurveyContentComponent);
//# sourceMappingURL=data:application/json;base64,