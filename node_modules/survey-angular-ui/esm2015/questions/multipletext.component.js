import { QuestionAngular } from "../question";
import { Component } from "@angular/core";
import { AngularComponentFactory } from "../component-factory";
import * as i0 from "@angular/core";
import * as i1 from "./multipletextrow.component";
import * as i2 from "@angular/common";
export class MultipleTextComponent extends QuestionAngular {
    constructor() {
        super(...arguments);
        this.trackRowBy = (index) => {
            return this.model.inputId + "rowkey" + index;
        };
    }
}
MultipleTextComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: MultipleTextComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
MultipleTextComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: MultipleTextComponent, selector: "sv-ng-multipletext-question", usesInheritance: true, ngImport: i0, template: "<table [class]=\"model.getQuestionRootCss()\" #contentElement>\n  <tbody>\n    <ng-container *ngFor=\"let row of model.getRows(); index as rowIndex; trackBy: trackRowBy\">\n      <sv-ng-multipletext-row [model]=\"row\" [question]=\"model\"></sv-ng-multipletext-row>\n    </ng-container>\n  </tbody>\n</table>", components: [{ type: i1.MultipleTextRowComponent, selector: "sv-ng-multipletext-row", inputs: ["question", "model"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: MultipleTextComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "sv-ng-multipletext-question",
                    templateUrl: "./multipletext.component.html"
                }]
        }] });
AngularComponentFactory.Instance.registerComponent("multipletext-question", MultipleTextComponent);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlwbGV0ZXh0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9xdWVzdGlvbnMvbXVsdGlwbGV0ZXh0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uL3NyYy9xdWVzdGlvbnMvbXVsdGlwbGV0ZXh0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFOUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7OztBQU0vRCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsZUFBMEM7SUFKckY7O1FBS0UsZUFBVSxHQUFHLENBQUMsS0FBYSxFQUFVLEVBQUU7WUFDckMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQy9DLENBQUMsQ0FBQTtLQUNGOzttSEFKWSxxQkFBcUI7dUdBQXJCLHFCQUFxQiwwRkNUbEMsc1RBTVE7NEZER0sscUJBQXFCO2tCQUpqQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSw2QkFBNkI7b0JBQ3ZDLFdBQVcsRUFBRSwrQkFBK0I7aUJBQzdDOztBQU9ELHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyx1QkFBdUIsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUXVlc3Rpb25Bbmd1bGFyIH0gZnJvbSBcIi4uL3F1ZXN0aW9uXCI7XG5pbXBvcnQgeyBNdWx0aXBsZVRleHRJdGVtTW9kZWwsIFF1ZXN0aW9uTXVsdGlwbGVUZXh0TW9kZWwgfSBmcm9tIFwic3VydmV5LWNvcmVcIjtcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBBbmd1bGFyQ29tcG9uZW50RmFjdG9yeSB9IGZyb20gXCIuLi9jb21wb25lbnQtZmFjdG9yeVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwic3YtbmctbXVsdGlwbGV0ZXh0LXF1ZXN0aW9uXCIsXG4gIHRlbXBsYXRlVXJsOiBcIi4vbXVsdGlwbGV0ZXh0LmNvbXBvbmVudC5odG1sXCJcbn0pXG5leHBvcnQgY2xhc3MgTXVsdGlwbGVUZXh0Q29tcG9uZW50IGV4dGVuZHMgUXVlc3Rpb25Bbmd1bGFyPFF1ZXN0aW9uTXVsdGlwbGVUZXh0TW9kZWw+IHtcbiAgdHJhY2tSb3dCeSA9IChpbmRleDogbnVtYmVyKTogc3RyaW5nID0+IHtcbiAgICByZXR1cm4gdGhpcy5tb2RlbC5pbnB1dElkICsgXCJyb3drZXlcIiArIGluZGV4O1xuICB9XG59XG5cbkFuZ3VsYXJDb21wb25lbnRGYWN0b3J5Lkluc3RhbmNlLnJlZ2lzdGVyQ29tcG9uZW50KFwibXVsdGlwbGV0ZXh0LXF1ZXN0aW9uXCIsIE11bHRpcGxlVGV4dENvbXBvbmVudCk7IiwiPHRhYmxlIFtjbGFzc109XCJtb2RlbC5nZXRRdWVzdGlvblJvb3RDc3MoKVwiICNjb250ZW50RWxlbWVudD5cbiAgPHRib2R5PlxuICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IHJvdyBvZiBtb2RlbC5nZXRSb3dzKCk7IGluZGV4IGFzIHJvd0luZGV4OyB0cmFja0J5OiB0cmFja1Jvd0J5XCI+XG4gICAgICA8c3YtbmctbXVsdGlwbGV0ZXh0LXJvdyBbbW9kZWxdPVwicm93XCIgW3F1ZXN0aW9uXT1cIm1vZGVsXCI+PC9zdi1uZy1tdWx0aXBsZXRleHQtcm93PlxuICAgIDwvbmctY29udGFpbmVyPlxuICA8L3Rib2R5PlxuPC90YWJsZT4iXX0=