import { Component, Input } from "@angular/core";
import { AngularComponentFactory } from "../component-factory";
import { BaseAngular } from "../base-angular";
import * as i0 from "@angular/core";
import * as i1 from "../survey-string.component";
import * as i2 from "@angular/common";
export class MatrixCellComponent extends BaseAngular {
    getModel() {
        return this.row.item;
    }
    onChange() {
        this.cellChangedOwner.onCellChanged(this.row, this.column);
    }
}
MatrixCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: MatrixCellComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
MatrixCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: MatrixCellComponent, selector: "sv-ng-matrix-cell, '[sv-ng-matrix-cell]'", inputs: { question: "question", column: "column", row: "row", columnIndex: "columnIndex", cellChangedOwner: "cellChangedOwner" }, usesInheritance: true, ngImport: i0, template: "<label (mousedown)=\"question.onMouseDown()\" [class]=\"question.getItemClass(row, column)\">\n  <input\n    type=\"radio\"\n    [class]=\"question.cssClasses.itemValue\"\n    [name]=\"row.fullName\"\n    [value]=\"column.value\"\n    [checked]=\"row.value === column.value\"\n    [readonly]=\"row.isReadOnlyAttr\"\n    [disabled]=\"row.isDisabledAttr\"\n    [attr.id]=\"question.inputId + '_' + row.name + '_' + columnIndex\"\n    (change)=\"onChange()\"\n    [attr.aria-required]=\"question.a11y_input_ariaRequired\"\n    [attr.aria-label]=\"question.getCellAriaLabel(row.locText.renderedHtml, column.locText.renderedHtml)\"\n    [attr.aria-invalid]=\"question.a11y_input_ariaInvalid\"\n    [attr.aria-errormessage]=\"question.a11y_input_ariaErrormessage\"\n  />\n  <span [class]=\"question.cssClasses.materialDecorator\">\n    <svg *ngIf=\"question.itemSvgIcon\" [class]=\"question.cssClasses.itemDecorator\">\n      <use [attr.xlink:href]=\"question.itemSvgIcon\"></use>\n    </svg> \n  </span>\n  <span *ngIf=\"question.isMobile\" [class]=\"question.cssClasses.cellResponsiveTitle\" [model]=\"column.locText\" sv-ng-string></span>\n</label>\n<ng-content></ng-content>", components: [{ type: i1.SurveyStringComponent, selector: "sv-ng-string, '[sv-ng-string]'", inputs: ["model"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: MatrixCellComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "sv-ng-matrix-cell, '[sv-ng-matrix-cell]'",
                    templateUrl: "./matrixcell.component.html"
                }]
        }], propDecorators: { question: [{
                type: Input
            }], column: [{
                type: Input
            }], row: [{
                type: Input
            }], columnIndex: [{
                type: Input
            }], cellChangedOwner: [{
                type: Input
            }] } });
AngularComponentFactory.Instance.registerComponent("survey-matrix-cell", MatrixCellComponent);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0cml4Y2VsbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcXVlc3Rpb25zL21hdHJpeGNlbGwuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vc3JjL3F1ZXN0aW9ucy9tYXRyaXhjZWxsLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7OztBQVU5QyxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsV0FBc0I7SUFNbkQsUUFBUTtRQUNoQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO0lBQ3ZCLENBQUM7SUFDTSxRQUFRO1FBQ2IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3RCxDQUFDOztpSEFYVSxtQkFBbUI7cUdBQW5CLG1CQUFtQix5T0NiaEMsc3BDQXVCeUI7NEZEVlosbUJBQW1CO2tCQUovQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSwwQ0FBMEM7b0JBQ3BELFdBQVcsRUFBRSw2QkFBNkI7aUJBQzNDOzhCQUVVLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csTUFBTTtzQkFBZCxLQUFLO2dCQUNHLEdBQUc7c0JBQVgsS0FBSztnQkFDRyxXQUFXO3NCQUFuQixLQUFLO2dCQUNHLGdCQUFnQjtzQkFBeEIsS0FBSzs7QUFRUix1QkFBdUIsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsb0JBQW9CLEVBQUUsbUJBQW1CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgTWF0cml4Um93TW9kZWwsIEl0ZW1WYWx1ZSwgUXVlc3Rpb25NYXRyaXhNb2RlbCB9IGZyb20gXCJzdXJ2ZXktY29yZVwiO1xuaW1wb3J0IHsgQW5ndWxhckNvbXBvbmVudEZhY3RvcnkgfSBmcm9tIFwiLi4vY29tcG9uZW50LWZhY3RvcnlcIjtcbmltcG9ydCB7IEJhc2VBbmd1bGFyIH0gZnJvbSBcIi4uL2Jhc2UtYW5ndWxhclwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElOZ01hdHJpeENlbGxDaGFuZ2VkIHtcbiAgb25DZWxsQ2hhbmdlZChyb3c6IE1hdHJpeFJvd01vZGVsLCBjb2x1bW46IEl0ZW1WYWx1ZSk6IHZvaWQ7XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJzdi1uZy1tYXRyaXgtY2VsbCwgJ1tzdi1uZy1tYXRyaXgtY2VsbF0nXCIsXG4gIHRlbXBsYXRlVXJsOiBcIi4vbWF0cml4Y2VsbC5jb21wb25lbnQuaHRtbFwiXG59KVxuZXhwb3J0IGNsYXNzIE1hdHJpeENlbGxDb21wb25lbnQgZXh0ZW5kcyBCYXNlQW5ndWxhcjxJdGVtVmFsdWU+IHtcbiAgQElucHV0KCkgcXVlc3Rpb24hOiBRdWVzdGlvbk1hdHJpeE1vZGVsO1xuICBASW5wdXQoKSBjb2x1bW4hOiBJdGVtVmFsdWU7XG4gIEBJbnB1dCgpIHJvdyE6IE1hdHJpeFJvd01vZGVsO1xuICBASW5wdXQoKSBjb2x1bW5JbmRleCE6IG51bWJlcjtcbiAgQElucHV0KCkgY2VsbENoYW5nZWRPd25lciE6IElOZ01hdHJpeENlbGxDaGFuZ2VkO1xuICBwcm90ZWN0ZWQgZ2V0TW9kZWwoKTogSXRlbVZhbHVlIHtcbiAgICByZXR1cm4gdGhpcy5yb3cuaXRlbTtcbiAgfVxuICBwdWJsaWMgb25DaGFuZ2UoKTogdm9pZCB7XG4gICAgdGhpcy5jZWxsQ2hhbmdlZE93bmVyLm9uQ2VsbENoYW5nZWQodGhpcy5yb3csIHRoaXMuY29sdW1uKTtcbiAgfVxufVxuQW5ndWxhckNvbXBvbmVudEZhY3RvcnkuSW5zdGFuY2UucmVnaXN0ZXJDb21wb25lbnQoXCJzdXJ2ZXktbWF0cml4LWNlbGxcIiwgTWF0cml4Q2VsbENvbXBvbmVudCk7IiwiPGxhYmVsIChtb3VzZWRvd24pPVwicXVlc3Rpb24ub25Nb3VzZURvd24oKVwiIFtjbGFzc109XCJxdWVzdGlvbi5nZXRJdGVtQ2xhc3Mocm93LCBjb2x1bW4pXCI+XG4gIDxpbnB1dFxuICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgW2NsYXNzXT1cInF1ZXN0aW9uLmNzc0NsYXNzZXMuaXRlbVZhbHVlXCJcbiAgICBbbmFtZV09XCJyb3cuZnVsbE5hbWVcIlxuICAgIFt2YWx1ZV09XCJjb2x1bW4udmFsdWVcIlxuICAgIFtjaGVja2VkXT1cInJvdy52YWx1ZSA9PT0gY29sdW1uLnZhbHVlXCJcbiAgICBbcmVhZG9ubHldPVwicm93LmlzUmVhZE9ubHlBdHRyXCJcbiAgICBbZGlzYWJsZWRdPVwicm93LmlzRGlzYWJsZWRBdHRyXCJcbiAgICBbYXR0ci5pZF09XCJxdWVzdGlvbi5pbnB1dElkICsgJ18nICsgcm93Lm5hbWUgKyAnXycgKyBjb2x1bW5JbmRleFwiXG4gICAgKGNoYW5nZSk9XCJvbkNoYW5nZSgpXCJcbiAgICBbYXR0ci5hcmlhLXJlcXVpcmVkXT1cInF1ZXN0aW9uLmExMXlfaW5wdXRfYXJpYVJlcXVpcmVkXCJcbiAgICBbYXR0ci5hcmlhLWxhYmVsXT1cInF1ZXN0aW9uLmdldENlbGxBcmlhTGFiZWwocm93LmxvY1RleHQucmVuZGVyZWRIdG1sLCBjb2x1bW4ubG9jVGV4dC5yZW5kZXJlZEh0bWwpXCJcbiAgICBbYXR0ci5hcmlhLWludmFsaWRdPVwicXVlc3Rpb24uYTExeV9pbnB1dF9hcmlhSW52YWxpZFwiXG4gICAgW2F0dHIuYXJpYS1lcnJvcm1lc3NhZ2VdPVwicXVlc3Rpb24uYTExeV9pbnB1dF9hcmlhRXJyb3JtZXNzYWdlXCJcbiAgLz5cbiAgPHNwYW4gW2NsYXNzXT1cInF1ZXN0aW9uLmNzc0NsYXNzZXMubWF0ZXJpYWxEZWNvcmF0b3JcIj5cbiAgICA8c3ZnICpuZ0lmPVwicXVlc3Rpb24uaXRlbVN2Z0ljb25cIiBbY2xhc3NdPVwicXVlc3Rpb24uY3NzQ2xhc3Nlcy5pdGVtRGVjb3JhdG9yXCI+XG4gICAgICA8dXNlIFthdHRyLnhsaW5rOmhyZWZdPVwicXVlc3Rpb24uaXRlbVN2Z0ljb25cIj48L3VzZT5cbiAgICA8L3N2Zz4gXG4gIDwvc3Bhbj5cbiAgPHNwYW4gKm5nSWY9XCJxdWVzdGlvbi5pc01vYmlsZVwiIFtjbGFzc109XCJxdWVzdGlvbi5jc3NDbGFzc2VzLmNlbGxSZXNwb25zaXZlVGl0bGVcIiBbbW9kZWxdPVwiY29sdW1uLmxvY1RleHRcIiBzdi1uZy1zdHJpbmc+PC9zcGFuPlxuPC9sYWJlbD5cbjxuZy1jb250ZW50PjwvbmctY29udGVudD4iXX0=