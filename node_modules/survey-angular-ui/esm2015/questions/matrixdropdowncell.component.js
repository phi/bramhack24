import { Component, Input, ViewChild } from "@angular/core";
import { BaseAngular } from "../base-angular";
import { getComponentName } from "../question";
import * as i0 from "@angular/core";
import * as i1 from "../components/matrix-actions/drag-drop-icon/drag-drop-icon";
import * as i2 from "../components/action-bar/action-bar.component";
import * as i3 from "../errors.component";
import * as i4 from "../survey-string.component";
import * as i5 from "./selectbase-item";
import * as i6 from "../comment-other.component";
import * as i7 from "@angular/common";
import * as i8 from "../utils/dynamic.directive";
import * as i9 from "../utils/ng-show.directive";
export class MatrixDropdownCellComponent extends BaseAngular {
    getModel() {
        if (this.cell.hasQuestion) {
            return this.cell.question;
        }
        if (!!this.cell.column) {
            return this.cell.column;
        }
        return null;
    }
    get row() {
        return this.cell.row;
    }
    ngDoCheck() {
        var _a;
        super.ngDoCheck();
        if (this.cell.isErrorsCell && ((_a = this.cell) === null || _a === void 0 ? void 0 : _a.question)) {
            this.cell.question.registerFunctionOnPropertiesValueChanged(["errors", "visible"], () => {
                this.update();
            }, "__ngSubscription");
        }
    }
    get panelComponentName() {
        const panel = this.cell.panel;
        const survey = panel.survey;
        if (!!survey) {
            const name = survey.getElementWrapperComponentName(panel);
            if (!!name) {
                return name;
            }
        }
        return "panel";
    }
    get panelComponentData() {
        const panel = this.cell.panel;
        const survey = panel.survey;
        let data;
        if (!!survey) {
            data = survey.getElementWrapperComponentData(panel);
        }
        return {
            componentName: "panel",
            componentData: {
                model: panel,
                data: data
            }
        };
    }
    getComponentName(element) { return getComponentName(element); }
    getCellStyle() {
        if (!!this.cell.width || !!this.cell.minWidth)
            return { width: this.cell.width, minWidth: this.cell.minWidth };
        return null;
    }
    get isRequiredCell() {
        return !!this.cell.column && this.cell.column.isRenderedRequired;
    }
    ngAfterViewInit() {
        var _a;
        if (!this.cell.hasQuestion || !this.question || !this.question.survey)
            return;
        const el = (_a = this.cellContainer) === null || _a === void 0 ? void 0 : _a.nativeElement;
        if (el) {
            const cellQ = this.cell.question;
            var options = {
                cell: this.cell.cell,
                cellQuestion: cellQ,
                htmlElement: el,
                row: this.cell.row,
                column: this.cell.cell.column,
            };
            this.question.survey.matrixAfterCellRender(this.question, options);
            cellQ.afterRenderCore(el);
        }
    }
    ngOnDestroy() {
        var _a;
        super.ngOnDestroy();
        if (this.cell.isErrorsCell && ((_a = this.cell) === null || _a === void 0 ? void 0 : _a.question)) {
            this.cell.question.unRegisterFunctionOnPropertiesValueChanged(["errors", "visible"], "__ngSubscription");
        }
    }
    get canRender() {
        return this.question && this.question.survey && this.cell.isVisible;
    }
}
MatrixDropdownCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: MatrixDropdownCellComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
MatrixDropdownCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: MatrixDropdownCellComponent, selector: "sv-ng-matrixdropdown-cell", inputs: { question: "question", cell: "cell" }, viewQueries: [{ propertyName: "cellContainer", first: true, predicate: ["cellContainer"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-template #template>\n  <td [class]=\"cell.className\" *ngIf=\"canRender\" [title]=\"cell.getTitle()\"\n    [style]=\"getCellStyle()\" [attr.colspan]=\"cell.colSpans\" (focusin)=\"cell.focusIn()\" #cellContainer>\n    <sv-ng-matrix-drag-drop-icon *ngIf=\"cell.isDragHandlerCell\"\n      [model]=\"$any({ data: { row: row, question: question } })\"></sv-ng-matrix-drag-drop-icon>\n    <sv-action-bar *ngIf=\"cell.isActionsCell\" [model]=\"cell.item.getData()\" [handleClick]=\"false\"></sv-action-bar>\n    <ng-container *ngIf=\"cell.hasPanel\">\n      <ng-template [component]=\"{ name: panelComponentName, data: panelComponentData }\"></ng-template>\n    </ng-container>\n    <div *ngIf=\"cell.isErrorsCell && cell.question?.hasVisibleErrors\" [element]=\"cell.question\" sv-ng-errors></div>\n    <span *ngIf=\"cell.showResponsiveTitle\" [class]=\"cell.responsiveTitleCss\" [model]=\"cell.responsiveLocTitle\" sv-ng-string></span>\n    <div *ngIf=\"cell.hasQuestion\" [class]=\"cell.cellQuestionWrapperClassName\"\n      [visible]=\"cell.question.isVisible\">\n      <ng-container *ngIf=\"!cell.isChoice && cell.question.isDefaultRendering()\">\n        <ng-template\n          [component]=\"{ name: question.getCellWrapperComponentName(cell.cell), data: { componentData: question.getCellWrapperComponentData(cell.cell)} }\">\n          <ng-template\n            [component]=\"{ name: getComponentName(cell.question), data: { model: cell.question } }\"></ng-template>\n        </ng-template>\n      </ng-container>\n      <ng-template *ngIf=\"!cell.isChoice && !cell.question.isDefaultRendering()\"\n        [component]=\"{ name: cell.question.getComponentName(), data: { model: cell.question } }\">\n      </ng-template>\n      <ng-container *ngIf=\"cell.isItemChoice\">\n        <ng-template\n          [component]=\"{ name: question.getCellWrapperComponentName(cell.cell), data: { componentData: question.getCellWrapperComponentData(cell.cell)} }\">\n          <sv-ng-selebase-item [showLabel]=\"false\" [inputType]=\"cell.isCheckbox ? 'checkbox': 'radio'\"\n            [question]=\"cell.question\" [model]=\"cell.item\"></sv-ng-selebase-item>\n        </ng-template>\n      </ng-container>\n      <div *ngIf=\"cell.isOtherChoice\" [class]=\"cell.question.getCommentAreaCss(true)\" [question]=\"cell.question\"\n        sv-ng-comment-other></div>\n    </div>\n    <ng-container *ngIf=\"cell.hasTitle\">\n      <ng-template\n        [component]=\"{ name: question.getCellWrapperComponentName($any(cell)), data: { componentData: question.getCellWrapperComponentData($any(cell))} }\">\n        <sv-ng-string [model]=\"cell.locTitle\"></sv-ng-string>\n        <span *ngIf=\"isRequiredCell\" [class]=\"question.cssClasses.cellRequiredText\">{{ cell.requiredText }}</span>\n      </ng-template>\n    </ng-container>\n  </td>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1.MatrixDynamicDragDropIconComponent, selector: "sv-ng-matrix-drag-drop-icon", inputs: ["model"] }, { type: i2.ActionBarComponent, selector: "sv-action-bar, sv-ng-action-bar", inputs: ["model", "handleClick"] }, { type: i3.ErrorsComponent, selector: "'[sv-ng-errors]'", inputs: ["element", "location"] }, { type: i4.SurveyStringComponent, selector: "sv-ng-string, '[sv-ng-string]'", inputs: ["model"] }, { type: i5.SelectBaseItemComponent, selector: "['sv-ng-selectbase-item'], sv-ng-selebase-item", inputs: ["question", "model", "inputType", "showLabel"] }, { type: i6.SurveyCommentOtherComponent, selector: "sv-ng-comment-other, '[sv-ng-comment-other]'", inputs: ["question"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }, { type: i9.VisibleDirective, selector: "[visible]", inputs: ["visible"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: MatrixDropdownCellComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "sv-ng-matrixdropdown-cell",
                    templateUrl: "./matrixdropdowncell.component.html",
                    styles: [":host { display: none; }"]
                }]
        }], propDecorators: { question: [{
                type: Input
            }], cell: [{
                type: Input
            }], cellContainer: [{
                type: ViewChild,
                args: ["cellContainer"]
            }] } });
//# sourceMappingURL=data:application/json;base64,